# https://docs.github.com/en/actions/using-workflows/workflow-syntax-for-github-actions
name: CI

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]
  workflow_dispatch:

# https://docs.github.com/en/actions/using-jobs/using-concurrency
concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

permissions:
  contents: read

# TODO: harden runner
# https://github.com/afuetterer/services-test/pull/20

jobs:
  tests:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version:
          - "3.11"
          # - "3.8"

    steps:
      - name: Check out the repository
        uses: actions/checkout@ac593985615ec2ede58e132d2e21d2b1cbd6127c # v3.3.0

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@d27e3f3d7c64b4bbf8e4abfb9b63b83e846e0435 # v4.5.0
        with:
          python-version: ${{ matrix.python-version }}

      # https://github.com/snok/install-poetry#caching-the-poetry-installation
      - name: Load cached Poetry installation
        id: cached-poetry
        uses: actions/cache@0865c47f36e68161719c5b124609996bb5c40129 # v3.0.5
        with:
          path: ~/.local
          key: poetry-0

      # https://github.com/snok/install-poetry#workflow-examples-and-tips
      - name: Install Poetry
        if: steps.cached-poetry.outputs.cache-hit != 'true'
        # TODO
        uses: snok/install-poetry@fdde2e959030c136a4108a030377df3f06cacc3a # v1.2.0
        with:
          virtualenvs-in-project: true

      - name: Load cached dependencies
        id: cached-dependencies
        uses: actions/cache@0865c47f36e68161719c5b124609996bb5c40129 # v3.0.5
        with:
          path: |
            ~/.cache/pip
            ~/.cache/pre-commit
            .venv
          key: venv-python${{ matrix.python-version }}-${{ hashFiles('poetry.lock', '.pre-commit-config.yaml') }}

      - name: Install dependencies
        if: steps.cached-dependencies.outputs.cache-hit != 'true'
        run: |
          poetry install --no-interaction --no-root --verbose

      - name: Install project
        run: |
          poetry install --only-root --no-interaction --verbose

      - name: Run code quality tests with pre-commit
        if: matrix.python-version == '3.11'
        run: poetry run pre-commit run --all-files --color=always

      - name: Run test suite with pytest
        run: poetry run pytest --cov -s

      # todo coverage

  release:
    needs: tests
    if: >-
      github.repository == 'afuetterer/services-test2'
      && github.event_name == 'push'
      && github.ref == 'refs/heads/main'
    runs-on: ubuntu-latest
    steps:
      - name: Check out the repository
        uses: actions/checkout@ac593985615ec2ede58e132d2e21d2b1cbd6127c # v3.3.0
        with:
          fetch-depth: 0
          token: ${{ secrets.RELEASE_TOKEN }}

      - name: Set up Python 3.11
        # TODO
        uses: actions/setup-python@d27e3f3d7c64b4bbf8e4abfb9b63b83e846e0435 # v4.5.0
        with:
          python-version: "3.11"

      - name: Load cached Poetry installation
        id: cached-poetry
        uses: actions/cache@0865c47f36e68161719c5b124609996bb5c40129 # v3.0.5
        with:
          path: ~/.local
          key: poetry-0

      - name: Install Poetry
        if: steps.cached-poetry.outputs.cache-hit != 'true'
        # TODO
        uses: snok/install-poetry@fdde2e959030c136a4108a030377df3f06cacc3a # v1.2.0
        with:
          virtualenvs-in-project: true

      - name: Load cached dependencies
        id: cached-dependencies
        uses: actions/cache@0865c47f36e68161719c5b124609996bb5c40129 # v3.0.5
        with:
          path: |
            ~/.cache/pip
            ~/.cache/pre-commit
            .venv
          key: venv-python${{ matrix.python-version }}-${{ hashFiles('poetry.lock', '.pre-commit-config.yaml') }}

      - name: Install dependencies
        if: steps.cached-dependencies.outputs.cache-hit != 'true'
        run: |
          poetry install --no-interaction --verbose --with=docs,release

      # https://python-semantic-release.readthedocs.io/en/latest/automatic-releases/github-actions.html
      - name: Publish semantic release
        env:
          GH_TOKEN: ${{ secrets.RELEASE_TOKEN }}
        run: |
          git config user.name github-actions
          git config user.email github-actions@github.com
          poetry run semantic-release publish --verbosity=DEBUG

      - name: Deploy the documentation
        run: |
          poetry run mkdocs gh-deploy

      - name: Publish package to TestPyPI
        run: |
          poetry config repositories.testpypi https://test.pypi.org/legacy/
          poetry config pypi-token.testpypi ${{ secrets.TEST_PYPI_API_TOKEN }}
          poetry publish --ansi --build --repository=testpypi --username=__token__ --skip-existing
