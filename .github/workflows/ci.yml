# https://docs.github.com/en/actions/using-workflows/workflow-syntax-for-github-actions
name: CI

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]
  workflow_dispatch:

# https://docs.github.com/en/actions/using-jobs/using-concurrency
concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

permissions:
  contents: read

# TODO: harden runner
# https://github.com/afuetterer/services-test/pull/20

jobs:
  # tests:
  #   runs-on: ubuntu-latest
  #   strategy:
  #     matrix:
  #       python-version:
  #         - "3.11"
  #         # - "3.8"

  #   steps:
  #     - name: Check out the repository
  #       uses: actions/checkout@ac593985615ec2ede58e132d2e21d2b1cbd6127c # v3.3.0

  #     - name: Set up Python ${{ matrix.python-version }}
  #       uses: actions/setup-python@v4
  #       with:
  #         python-version: ${{ matrix.python-version }}

  #     # https://github.com/snok/install-poetry#workflow-examples-and-tips

  #     # this is slow
  #     # see: https://github.com/snok/install-poetry#caching-the-poetry-installation
  #     - name: Install Poetry
  #       uses: snok/install-poetry@v1
  #       with:
  #         virtualenvs-create: true
  #         virtualenvs-in-project: true

  #     - name: Load cached dependencies
  #       id: cached-dependencies
  #       uses: actions/cache@v3
  #       with:
  #         path: |
  #           ~/.cache/pip
  #           ~/.cache/pre-commit
  #           .venv
  #         key: venv-python${{ matrix.python-version }}-${{ hashFiles('poetry.lock', '.pre-commit-config.yaml') }}

  #     - name: Install dependencies
  #       if: steps.cached-dependencies.outputs.cache-hit != 'true'
  #       run: |
  #         poetry install --no-interaction --no-root --verbose

  #     - name: Install project
  #       run: |
  #         poetry install --only-root --no-interaction --verbose

  #     - name: Run code quality tests with pre-commit
  #       if: matrix.python-version == '3.11'
  #       run: poetry run pre-commit run --all-files --color=always

  #     - name: Run test suite with pytest
  #       run: poetry run pytest --cov -s

  #     # todo coverage

  release:
    # needs: tests
    if: github.repository == 'afuetterer/services-test2' && github.event_name == 'push' && github.ref == 'refs/heads/main'
    runs-on: ubuntu-latest

    steps:
      - name: Check out the repository
        uses: actions/checkout@v3
        with:
          fetch-depth: 0
          token: ${{ secrets.RELEASE_TOKEN }}

      - name: Set up Python 3.11
        uses: actions/setup-python@v4
        with:
          python-version: "3.11"

      - name: Install Poetry
        uses: snok/install-poetry@d45b6d76012debf457ab49dffc7fb7b2efe8071d # v1.3.3
        with:
          virtualenvs-create: true
          virtualenvs-in-project: true

      - name: Install CI dependencies
        run: poetry install --with=docs,release

      # https://python-semantic-release.readthedocs.io/en/latest/automatic-releases/github-actions.html
      - name: Publish semantic release
        env:
          GH_TOKEN: ${{ secrets.RELEASE_TOKEN }}
        run: |
          git config user.name github-actions
          git config user.email github-actions@github.com
          poetry run semantic-release publish --verbosity=DEBUG

      - name: Deploy the documentation
        run: |
          poetry run mkdocs gh-deploy

      - name: Publish package to TestPyPI
        run: |
          poetry config repositories.testpypi https://test.pypi.org/legacy/
          poetry config pypi-token.testpypi ${{ secrets.TEST_PYPI_API_TOKEN }}
          poetry publish --ansi --build --repository=testpypi --username=__token__
