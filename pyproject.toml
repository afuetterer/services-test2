[tool.poetry]
name = "services-test2"
version = "0.1.0"
authors = ["Heinz-Alexander Fuetterer <fuetterh@posteo.de>"]
description = "services-test2"
license = "MIT"
readme = "README.md"
repository = "https://github.com/afuetterer/services-test2"
documentation = "https://afuetterer.github.io/services-test2"

packages = [
    { include = "services_test2", from = "src" },
]
classifiers = [
    "Development Status :: 1 - Planning",
    "License :: OSI Approved :: MIT License",
    "Programming Language :: Python :: 3 :: Only",
    "Programming Language :: Python :: 3.8",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",

    # add more here?
]

[tool.poetry.dependencies]
python = ">=3.8,<3.12"
httpx = ">=0.23.3"
typer = {extras = ["all"], version = ">=0.7.0"}

[tool.poetry.group.dev.dependencies]
pre-commit = ">=3.0.2"
pytest-cov = ">=4.0.0"
pytest-mock = ">=3.10.0"

[tool.poetry.group.docs]
optional = true
[tool.poetry.group.docs.dependencies]
mkdocs = ">=1.4.2"
mkdocstrings = {extras = ["python"], version = ">=0.20.0"}
mkdocs-click = ">=0.8.0"
mkdocs-include-markdown-plugin = ">=4.0.3"
mkdocs-gen-files = ">=0.4.0"
mkdocs-literate-nav = ">=0.6.0"
mkdocs-material = ">=9.0.6"
mkdocs-section-index = ">=0.3.5"

[tool.poetry.group.release]
optional = true
[tool.poetry.group.release.dependencies]
python-semantic-release = { version = "==8.0.0-alpha.3", allow-prereleases = true}

[tool.poetry.scripts]
services-test2 = "services_test2.__main__:app"

[build-system]
build-backend = "poetry.core.masonry.api"
requires = [
  "poetry-core",
]

[tool.black]
# https://black.readthedocs.io/en/stable/usage_and_configuration
line-length = 100
target_version = ["py38", "py39", "py310", "py311"]

[tool.mypy]
# https://mypy.readthedocs.io/en/stable/config_file.html#using-a-pyproject-toml-file
python_version = "3.8"
strict = true
warn_unreachable = true
pretty = true
show_column_numbers = true
show_error_codes = true
show_error_context = true

[tool.pytest.ini_options]
# https://docs.pytest.org/en/stable/customize.html
testpaths = "tests"

[tool.coverage.run]
# https://coverage.readthedocs.io/en/7.0.5/config.html#configuration-reference
branch = true
parallel = true
omit = ["tests/*"]

[tool.coverage.report]
skip_empty = true

[tool.ruff]
# https://github.com/charliermarsh/ruff#configuration
line-length = 100
select = ["B", "E", "F", "I", "S", "TCH", "UP"]
src = ["src", "tests"]
# Always autofix, but never try to fix "F401" (unused imports).
fix = true
unfixable = ["F401"]
target-version = "py38"

[tool.ruff.per-file-ignores]
# https://github.com/charliermarsh/ruff#flake8-bandit-s
# ignore "S101" (assert-used) in test files
"test_*.py" = ["S101"]

[tool.ruff.isort]
# https://github.com/charliermarsh/ruff#isort
known-first-party = ["services_test", "tests"]

[tool.ruff.pyupgrade]
# https://github.com/charliermarsh/ruff#pyupgrade
keep-runtime-typing = true

# version_pattern = [
#   'CITATION.cff:^version: {version}$'
# ]
# # TODO: does this work?
# upload_to_pypi = false
# upload_to_release = true

# # Update release date in CITATION.cff
# pre_commit_command = '''
# sed -i -r "s/(date-released: ).*/\1$(date '+%Y-%m-%d')/" CITATION.cff &&
# sed -i -r "s/^## v/## /" CHANGELOG.md
# ''' # this does not work. this runs before the changelog is updated!
# changelog_components = "semantic_release.changelog.changelog_headers,semantic_release.changelog.compare_url"

[tool.semantic_release]
# https://github.com/python-semantic-release/python-semantic-release/blob/v8.0.0-alpha.3/docs/configuration.rst
# https://github.com/python-semantic-release/python-semantic-release/blob/v8.0.0-alpha.3/docs/migrating_from_v7.rst
assets = []
build_command = "poetry build"
commit_message = "{version}\n\n[skip ci]"
commit_parser = "angular"
logging_use_named_masks = false
major_on_zero = false
tag_format = "{version}"
version_toml = ["pyproject.toml:tool.poetry.version"]

[tool.semantic_release.branches.main]
# TODO: change this, when PR is merged
match = "(main|semantic-release)"

[tool.semantic_release.changelog]
template_dir = "templates"
changelog_file = "CHANGELOG.md"
exclude_commit_patterns = [
    "chore: release"
]

[tool.semantic_release.changelog.environment]
block_start_string = "{%"
block_end_string = "%}"
variable_start_string = "{{"
variable_end_string = "}}"
comment_start_string = "{#"
comment_end_string = "#}"
trim_blocks = false
lstrip_blocks = false
newline_sequence = "\n"
keep_trailing_newline = false
extensions = []
autoescape = true

[tool.semantic_release.commit_author]
env = "GIT_COMMIT_AUTHOR"
default = "github-actions[bot] <41898282+github-actions[bot]@users.noreply.github.com>"

[tool.semantic_release.commit_parser_options]
allowed_tags = [
    "build",
    "chore",
    "ci",
    "docs",
    "feat",
    "fix",
    "perf",
    "style",
    "refactor",
    "test",
]
minor_tags = ["feat"]
patch_tags = ["fix", "perf"]

[tool.semantic_release.remote]
name = "origin"
type = "github"
ignore_token_for_push = false

[tool.semantic_release.remote.token]
env = "GH_TOKEN"

[tool.semantic_release.upload]
dist_glob_patterns = ["dist/*"]
upload_to_repository = false
upload_to_vcs_release = false
sign = false
sign_with = "gpg"
config_file = "~/.pypirc"
skip_existing = false
repository_name = "pypi"
verbose = false
disable_progress_bar = false

[tool.semantic_release.upload.pypi_token]
env = "PYPI_TOKEN"

[tool.semantic_release.upload.username]
env = "REPOSITORY_USERNAME"
default_env = "TWINE_USERNAME"

[tool.semantic_release.upload.password]
env = "REPOSITORY_PASSWORD"
default_env = "TWINE_PASSWORD"

[tool.semantic_release.upload.non_interactive]
env = "TWINE_NON_INTERACTIVE"
default = "true"

[tool.semantic_release.upload.repository_url]
env = "REPOSITORY_URL"
default_env = "TWINE_REPOSITORY_URL"
